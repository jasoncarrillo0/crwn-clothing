{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { ACTION_TYPES } from '../action-types';\nimport { auth, provider, createUserProfileDoc, getCurrentUser } from '../../firebase/utils';\nimport { googleSignInSuccess, googleSignInFailure, emailSignInFailure, emailSignInSuccess, checkUserSession } from './user-actions'; // Google Sign In------------------------------------------------------------------------------------\n\nfunction* onGoogleSignInStart() {\n  yield takeLatest(ACTION_TYPES.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nfunction* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(provider);\n    const userRef = yield call(createUserProfileDoc, user);\n    const userSnapshot = yield userRef.get();\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(googleSignInFailure(error));\n  }\n} // User Sign In------------------------------------------------------------------------------------\n\n\nfunction* onEmailSignInStart() {\n  yield takeLatest(ACTION_TYPES.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nfunction* signInWithEmail(action) {\n  try {\n    const {\n      email,\n      password\n    } = action.payload;\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDoc, user);\n    const userSnapshot = yield userRef.get();\n    yield put(emailSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(emailSignInFailure);\n  }\n} // USER SESSION CHECKING---------------------------------------------------------------------------\n\n\nfunction* onCheckUserSession() {\n  yield takeLatest(ACTION_TYPES.CHECK_USER_SESSION, getCurrentUser);\n}\n\nexport function* userSagas() {\n  yield all([call(onCheckUserSession), call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/jasoncarrillo/Documents/Coding/React Projects/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","ACTION_TYPES","auth","provider","createUserProfileDoc","getCurrentUser","googleSignInSuccess","googleSignInFailure","emailSignInFailure","emailSignInSuccess","checkUserSession","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","id","data","error","onEmailSignInStart","EMAIL_SIGN_IN_START","signInWithEmail","action","email","password","payload","signInWithEmailAndPassword","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,oBAAzB,EAA+CC,cAA/C,QAAqE,sBAArE;AACA,SAASC,mBAAT,EACIC,mBADJ,EAEIC,kBAFJ,EAGIC,kBAHJ,EAIIC,gBAJJ,QAKQ,gBALR,C,CAQA;;AACA,UAAUC,mBAAV,GAAgC;AAC5B,QAAMd,UAAU,CACZI,YAAY,CAACW,oBADD,EAEZC,gBAFY,CAAhB;AAIH;;AACD,UAAUA,gBAAV,GAA6B;AACzB,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMZ,IAAI,CAACa,eAAL,CAAqBZ,QAArB,CAAvB;AACA,UAAMa,OAAO,GAAG,MAAMhB,IAAI,CAACI,oBAAD,EAAuBU,IAAvB,CAA1B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMpB,GAAG,CACLQ,mBAAmB,CAAC;AAACa,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAlB;AAAsB,SAAGF,YAAY,CAACG,IAAb;AAAzB,KAAD,CADd,CAAT;AAGH,GAPD,CAOE,OAAMC,KAAN,EAAa;AACX,UAAMvB,GAAG,CAACS,mBAAmB,CAACc,KAAD,CAApB,CAAT;AACH;AACJ,C,CAID;;;AACA,UAAUC,kBAAV,GAA+B;AAC3B,QAAMzB,UAAU,CACZI,YAAY,CAACsB,mBADD,EAEZC,eAFY,CAAhB;AAIH;;AACD,UAAUA,eAAV,CAA0BC,MAA1B,EAAkC;AAC9B,MAAI;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBF,MAAM,CAACG,OAAnC;AACA,UAAM;AAAEd,MAAAA;AAAF,QAAgB,MAAMZ,IAAI,CAAC2B,0BAAL,CAAgCH,KAAhC,EAAuCC,QAAvC,CAA5B;AACA,UAAMX,OAAO,GAAQ,MAAMhB,IAAI,CAACI,oBAAD,EAAuBU,IAAvB,CAA/B;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMpB,GAAG,CACLW,kBAAkB,CAAC;AAACU,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAlB;AAAsB,SAAGF,YAAY,CAACG,IAAb;AAAzB,KAAD,CADb,CAAT;AAGH,GARD,CAQE,OAAOC,KAAP,EAAc;AACZ,UAAMvB,GAAG,CAACU,kBAAD,CAAT;AACH;AACJ,C,CAGD;;;AACA,UAAUsB,kBAAV,GAA+B;AAC3B,QAAMjC,UAAU,CACZI,YAAY,CAAC8B,kBADD,EAEZ1B,cAFY,CAAhB;AAIH;;AAOD,OAAO,UAAU2B,SAAV,GAAsB;AACzB,QAAMjC,GAAG,CAAC,CACNC,IAAI,CAAC8B,kBAAD,CADE,EAEN9B,IAAI,CAACW,mBAAD,CAFE,EAGNX,IAAI,CAACsB,kBAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { ACTION_TYPES } from '../action-types';\nimport { auth, provider, createUserProfileDoc, getCurrentUser } from '../../firebase/utils';\nimport { googleSignInSuccess, \n    googleSignInFailure, \n    emailSignInFailure,\n    emailSignInSuccess,\n    checkUserSession\n } from './user-actions';\n\n\n// Google Sign In------------------------------------------------------------------------------------\nfunction* onGoogleSignInStart() {\n    yield takeLatest(\n        ACTION_TYPES.GOOGLE_SIGN_IN_START,\n        signInWithGoogle\n    );\n}\nfunction* signInWithGoogle() {\n    try {\n        const { user } = yield auth.signInWithPopup(provider);\n        const userRef = yield call(createUserProfileDoc, user);\n        const userSnapshot = yield userRef.get();\n        yield put(\n            googleSignInSuccess({id: userSnapshot.id, ...userSnapshot.data()})\n        )\n    } catch(error) {\n        yield put(googleSignInFailure(error));\n    }\n}\n\n\n \n// User Sign In------------------------------------------------------------------------------------\nfunction* onEmailSignInStart() {\n    yield takeLatest(\n        ACTION_TYPES.EMAIL_SIGN_IN_START,\n        signInWithEmail\n    )\n}\nfunction* signInWithEmail(action) {\n    try {\n        const { email, password } = action.payload;\n        const { user }     =  yield auth.signInWithEmailAndPassword(email, password);\n        const userRef      = yield call(createUserProfileDoc, user);\n        const userSnapshot = yield userRef.get();\n        yield put(\n            emailSignInSuccess({id: userSnapshot.id, ...userSnapshot.data()})\n        )\n    } catch (error) {\n        yield put(emailSignInFailure)\n    }\n}\n\n\n// USER SESSION CHECKING---------------------------------------------------------------------------\nfunction* onCheckUserSession() {\n    yield takeLatest(\n        ACTION_TYPES.CHECK_USER_SESSION,\n        getCurrentUser\n    )\n}\n\n\n\n\n\n\nexport function* userSagas() {\n    yield all([\n        call(onCheckUserSession),\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart)\n    ]);\n}"]},"metadata":{},"sourceType":"module"}