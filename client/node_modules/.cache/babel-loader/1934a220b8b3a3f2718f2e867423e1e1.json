{"ast":null,"code":"import { takeEvery, call, put, all } from 'redux-saga/effects';\nimport { ACTION_TYPES } from '../../action-types';\nimport { firestore, convertCollectionSnapshotToMap } from '../../../firebase/utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from '../../_db/collections-data/collections-data.actions'; // takeEvery creates a non-blocking instance of a function so the app can continue\n\nfunction* fetchCollectionsStart() {\n  yield takeEvery(ACTION_TYPES.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\n\nfunction* fetchCollectionsAsync() {\n  try {\n    const collectionsRef = firestore.collection('collections');\n    const snapshot = yield collectionsRef.get();\n    const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}\n\nexport function* collectionsDataSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}","map":{"version":3,"sources":["/Users/jasoncarrillo/Documents/Coding/React Projects/crwn-clothing/client/src/redux/_db/collections-data/collections-data.sagas.js"],"names":["takeEvery","call","put","all","ACTION_TYPES","firestore","convertCollectionSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsStart","FETCH_COLLECTIONS_START","fetchCollectionsAsync","collectionsRef","collection","snapshot","get","collectionsMap","error","message","collectionsDataSagas"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,QAA0C,oBAA1C;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,SAAT,EAAoBC,8BAApB,QAA0D,yBAA1D;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,qDAAjE,C,CAEA;;AACA,UAAUC,qBAAV,GAAkC;AAC9B,QAAMT,SAAS,CACXI,YAAY,CAACM,uBADF,EAEXC,qBAFW,CAAf;AAIH;;AAED,UAAUA,qBAAV,GAAkC;AAC9B,MAAI;AACA,UAAMC,cAAc,GAAGP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAAvB;AACA,UAAMC,QAAQ,GAAS,MAAMF,cAAc,CAACG,GAAf,EAA7B;AACA,UAAMC,cAAc,GAAG,MAAMf,IAAI,CAACK,8BAAD,EAAiCQ,QAAjC,CAAjC;AACA,UAAMZ,GAAG,CAACK,uBAAuB,CAACS,cAAD,CAAxB,CAAT;AACH,GALD,CAKE,OAAOC,KAAP,EAAc;AACZ,UAAMf,GAAG,CAACM,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH;AACJ;;AAED,OAAO,UAAUC,oBAAV,GAAiC;AACpC,QAAMhB,GAAG,CAAC,CACNF,IAAI,CAACQ,qBAAD,CADE,CAAD,CAAT;AAGH","sourcesContent":["import { takeEvery, call, put, all } from 'redux-saga/effects';\nimport { ACTION_TYPES } from '../../action-types';\nimport { firestore, convertCollectionSnapshotToMap } from '../../../firebase/utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from '../../_db/collections-data/collections-data.actions';\n\n// takeEvery creates a non-blocking instance of a function so the app can continue\nfunction* fetchCollectionsStart() {\n    yield takeEvery(\n        ACTION_TYPES.FETCH_COLLECTIONS_START, \n        fetchCollectionsAsync \n    );\n}\n\nfunction* fetchCollectionsAsync() {\n    try {\n        const collectionsRef = firestore.collection('collections');\n        const snapshot       = yield collectionsRef.get();\n        const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);    \n        yield put(fetchCollectionsSuccess(collectionsMap));\n    } catch (error) {\n        yield put(fetchCollectionsFailure(error.message));\n    }\n}\n\nexport function* collectionsDataSagas() {\n    yield all([\n        call(fetchCollectionsStart)\n    ]);\n}"]},"metadata":{},"sourceType":"module"}