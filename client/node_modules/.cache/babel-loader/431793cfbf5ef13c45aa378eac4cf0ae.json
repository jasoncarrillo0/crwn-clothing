{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport { ACTION_TYPES } from '../../action-types';\nimport { firestore, convertCollectionSnapshotToMap } from '../../../firebase/utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from '../../_db/collections-data/collections-data.actions'; // takeEvery creates a non-blocking instance of a function so the app can continue\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ACTION_TYPES.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\n\nfunction* fetchCollectionsAsync() {\n  try {\n    const collectionsRef = firestore.collection('collections');\n    const snapshot = yield collectionsRef.get();\n    const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n}","map":{"version":3,"sources":["/Users/jasoncarrillo/Documents/Coding/React Projects/crwn-clothing/src/redux/_db/collections-data/collections-data.sagas.js"],"names":["takeEvery","call","put","ACTION_TYPES","firestore","convertCollectionSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","fetchCollectionsStart","FETCH_COLLECTIONS_START","fetchCollectionsAsync","collectionsRef","collection","snapshot","get","collectionsMap","error","message"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,SAAT,EAAoBC,8BAApB,QAA0D,yBAA1D;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,qDAAjE,C,CAEA;;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMR,SAAS,CACXG,YAAY,CAACM,uBADF,EAEXC,qBAFW,CAAf;AAIH;;AAED,UAAUA,qBAAV,GAAkC;AAC9B,MAAI;AACA,UAAMC,cAAc,GAAGP,SAAS,CAACQ,UAAV,CAAqB,aAArB,CAAvB;AACA,UAAMC,QAAQ,GAAS,MAAMF,cAAc,CAACG,GAAf,EAA7B;AACA,UAAMC,cAAc,GAAG,MAAMd,IAAI,CAACI,8BAAD,EAAiCQ,QAAjC,CAAjC;AACA,UAAMX,GAAG,CAACI,uBAAuB,CAACS,cAAD,CAAxB,CAAT;AACH,GALD,CAKE,OAAOC,KAAP,EAAc;AACZ,UAAMd,GAAG,CAACK,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH;AACJ","sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects';\nimport { ACTION_TYPES } from '../../action-types';\nimport { firestore, convertCollectionSnapshotToMap } from '../../../firebase/utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from '../../_db/collections-data/collections-data.actions';\n\n// takeEvery creates a non-blocking instance of a function so the app can continue\n\nexport function* fetchCollectionsStart() {\n    yield takeEvery(\n        ACTION_TYPES.FETCH_COLLECTIONS_START, \n        fetchCollectionsAsync \n    );\n}\n\nfunction* fetchCollectionsAsync() {\n    try {\n        const collectionsRef = firestore.collection('collections');\n        const snapshot       = yield collectionsRef.get();\n        const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);    \n        yield put(fetchCollectionsSuccess(collectionsMap));\n    } catch (error) {\n        yield put(fetchCollectionsFailure(error.message));\n    }\n}"]},"metadata":{},"sourceType":"module"}