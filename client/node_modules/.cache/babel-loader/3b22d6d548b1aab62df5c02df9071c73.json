{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { ACTION_TYPES } from '../action-types';\nimport { auth, provider, createUserProfileDoc, getCurrentUser } from '../../firebase/utils';\nimport { signInFailure, signInSuccess } from './user-actions'; // UTILITIES -----------------------------------------------------------------\n\nfunction* getSnapshotFromUserAuth(userAuth) {\n  console.log(userAuth);\n\n  try {\n    const userRef = yield call(createUserProfileDoc, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n} // Google Sign In------------------------------------------------------------------------------------\n\n\nfunction* onGoogleSignInStart() {\n  yield takeLatest(ACTION_TYPES.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nfunction* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(provider);\n    getSnapshotFromUserAuth(user);\n  } catch (error) {\n    put(signInFailure(error.message));\n  }\n} // User Sign In------------------------------------------------------------------------------------\n\n\nfunction* onEmailSignInStart() {\n  yield takeLatest(ACTION_TYPES.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nfunction* signInWithEmail(action) {\n  try {\n    const {\n      email,\n      password\n    } = action.payload;\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    put(signInFailure(error.message));\n  }\n} // USER SESSION CHECKING---------------------------------------------------------------------------\n\n\nfunction* onCheckUserSession() {\n  yield takeLatest(ACTION_TYPES.CHECK_USER_SESSION, checkIfUserIsAutheticated);\n}\n\nfunction* checkIfUserIsAutheticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n\n    if (!userAuth) {\n      return;\n    }\n\n    getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    put(signInFailure(error.message));\n  }\n}\n\nexport function* userSagas() {\n  yield all([call(onCheckUserSession), call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["/Users/jasoncarrillo/Documents/Coding/React Projects/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","ACTION_TYPES","auth","provider","createUserProfileDoc","getCurrentUser","signInFailure","signInSuccess","getSnapshotFromUserAuth","userAuth","console","log","userRef","userSnapshot","get","id","data","error","message","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithGoogle","user","signInWithPopup","onEmailSignInStart","EMAIL_SIGN_IN_START","signInWithEmail","action","email","password","payload","signInWithEmailAndPassword","onCheckUserSession","CHECK_USER_SESSION","checkIfUserIsAutheticated","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,oBAAzB,EAA+CC,cAA/C,QAAqE,sBAArE;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C,C,CACA;;AACA,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AACxCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,MAAI;AACA,UAAMG,OAAO,GAAQ,MAAMZ,IAAI,CAACI,oBAAD,EAAuBK,QAAvB,CAA/B;AACA,UAAMI,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMhB,GAAG,CACLS,aAAa,CAAC;AAACQ,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAlB;AAAsB,SAAGF,YAAY,CAACG,IAAb;AAAzB,KAAD,CADR,CAAT;AAGH,GAND,CAME,OAAOC,KAAP,EAAc;AACZ,UAAMnB,GAAG,CAACQ,aAAa,CAACW,KAAK,CAACC,OAAP,CAAd,CAAT;AACH;AACJ,C,CAID;;;AACA,UAAUC,mBAAV,GAAgC;AAC5B,QAAMtB,UAAU,CACZI,YAAY,CAACmB,oBADD,EAEZC,gBAFY,CAAhB;AAIH;;AACD,UAAUA,gBAAV,GAA6B;AACzB,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMpB,IAAI,CAACqB,eAAL,CAAqBpB,QAArB,CAAvB;AACAK,IAAAA,uBAAuB,CAACc,IAAD,CAAvB;AACH,GAHD,CAGE,OAAML,KAAN,EAAa;AACXnB,IAAAA,GAAG,CAACQ,aAAa,CAACW,KAAK,CAACC,OAAP,CAAd,CAAH;AACH;AACJ,C,CAKD;;;AACA,UAAUM,kBAAV,GAA+B;AAC3B,QAAM3B,UAAU,CACZI,YAAY,CAACwB,mBADD,EAEZC,eAFY,CAAhB;AAIH;;AACD,UAAUA,eAAV,CAA0BC,MAA1B,EAAkC;AAC9B,MAAI;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBF,MAAM,CAACG,OAAnC;AACA,UAAM;AAAER,MAAAA;AAAF,QAAsB,MAAMpB,IAAI,CAAC6B,0BAAL,CAAgCH,KAAhC,EAAuCC,QAAvC,CAAlC;AACA,UAAMrB,uBAAuB,CAACc,IAAD,CAA7B;AACH,GAJD,CAIE,OAAOL,KAAP,EAAc;AACZnB,IAAAA,GAAG,CAACQ,aAAa,CAACW,KAAK,CAACC,OAAP,CAAd,CAAH;AACH;AACJ,C,CAKD;;;AACA,UAAUc,kBAAV,GAA+B;AAC3B,QAAMnC,UAAU,CACZI,YAAY,CAACgC,kBADD,EAEZC,yBAFY,CAAhB;AAIH;;AACD,UAAUA,yBAAV,GAAsC;AAClC,MAAI;AACA,UAAMzB,QAAQ,GAAG,MAAMJ,cAAc,EAArC;;AACA,QAAI,CAACI,QAAL,EAAe;AACX;AACH;;AACDD,IAAAA,uBAAuB,CAACC,QAAD,CAAvB;AACH,GAND,CAME,OAAMQ,KAAN,EAAa;AACXnB,IAAAA,GAAG,CAACQ,aAAa,CAACW,KAAK,CAACC,OAAP,CAAd,CAAH;AACH;AACJ;;AAUD,OAAO,UAAUiB,SAAV,GAAsB;AACzB,QAAMpC,GAAG,CAAC,CACNC,IAAI,CAACgC,kBAAD,CADE,EAENhC,IAAI,CAACmB,mBAAD,CAFE,EAGNnB,IAAI,CAACwB,kBAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { ACTION_TYPES } from '../action-types';\nimport { auth, provider, createUserProfileDoc, getCurrentUser } from '../../firebase/utils';\nimport { signInFailure, signInSuccess } from './user-actions';\n// UTILITIES -----------------------------------------------------------------\nfunction* getSnapshotFromUserAuth(userAuth) {\n    console.log(userAuth);\n    try {\n        const userRef      = yield call(createUserProfileDoc, userAuth);\n        const userSnapshot = yield userRef.get();\n        yield put(\n            signInSuccess({id: userSnapshot.id, ...userSnapshot.data()})\n        );\n    } catch (error) {\n        yield put(signInFailure(error.message))\n    }\n}\n\n\n\n// Google Sign In------------------------------------------------------------------------------------\nfunction* onGoogleSignInStart() {\n    yield takeLatest(\n        ACTION_TYPES.GOOGLE_SIGN_IN_START,\n        signInWithGoogle\n    );\n}\nfunction* signInWithGoogle() {\n    try {\n        const { user } = yield auth.signInWithPopup(provider);\n        getSnapshotFromUserAuth(user);\n    } catch(error) {\n        put(signInFailure(error.message))\n    }\n}\n\n\n\n \n// User Sign In------------------------------------------------------------------------------------\nfunction* onEmailSignInStart() {\n    yield takeLatest(\n        ACTION_TYPES.EMAIL_SIGN_IN_START,\n        signInWithEmail\n    )\n}\nfunction* signInWithEmail(action) {\n    try {\n        const { email, password } = action.payload;\n        const { user }            = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user);   \n    } catch (error) {\n        put(signInFailure(error.message))\n    }\n}\n\n\n\n\n// USER SESSION CHECKING---------------------------------------------------------------------------\nfunction* onCheckUserSession() {\n    yield takeLatest(\n        ACTION_TYPES.CHECK_USER_SESSION,\n        checkIfUserIsAutheticated\n    )\n}\nfunction* checkIfUserIsAutheticated() {\n    try {\n        const userAuth = yield getCurrentUser();\n        if (!userAuth) {\n            return\n        }\n        getSnapshotFromUserAuth(userAuth);\n    } catch(error) {\n        put(signInFailure(error.message));\n    }\n}\n\n\n\n\n\n\n\n\n\nexport function* userSagas() {\n    yield all([\n        call(onCheckUserSession),\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart)\n    ]);\n}"]},"metadata":{},"sourceType":"module"}