{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { ACTION_TYPES } from '../action-types';\nimport { auth, provider, createUserProfileDoc, getCurrentUser } from '../../firebase/utils';\nimport { signInFailure, signInSuccess, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure, signInStartWithEmail } from './user-actions'; // UTILITIES -----------------------------------------------------------------\n\nfunction* getSnapshotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDoc, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n} // Google Sign In------------------------------------------------------------------------------------\n\n\nfunction* onGoogleSignInStart() {\n  yield takeLatest(ACTION_TYPES.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\n\nfunction* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(provider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n} // User Sign In------------------------------------------------------------------------------------\n\n\nfunction* onEmailSignInStart() {\n  yield takeLatest(ACTION_TYPES.EMAIL_SIGN_IN_START, signInWithEmail);\n}\n\nfunction* signInWithEmail(action) {\n  try {\n    const {\n      email,\n      password\n    } = action.payload;\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n} // USER SESSION CHECKING---------------------------------------------------------------------------\n\n\nfunction* onCheckUserSession() {\n  yield takeLatest(ACTION_TYPES.CHECK_USER_SESSION, checkIfUserIsAuthenticated);\n}\n\nfunction* checkIfUserIsAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n\n    if (!userAuth) {\n      return;\n    }\n\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n} // USER SIGN OUT---------------------------------------------------------------------------\n\n\nfunction* onSignOutStart() {\n  yield takeLatest(ACTION_TYPES.SIGN_OUT_START, userSignOut);\n}\n\nfunction* userSignOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error.message));\n  }\n} // USER SIGN UP---------------------------------------------------------------------------\n\n\nfunction* onSignUpStart() {\n  yield takeLatest(ACTION_TYPES.SIGN_UP_START, signUp);\n}\n\nfunction* signUp(action) {\n  const {\n    displayName,\n    email,\n    password,\n    confirmPassword\n  } = action.payload;\n\n  if (password !== confirmPassword) {\n    alert(\"Passwords do not match. Try again.\");\n    return;\n  }\n\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password);\n    yield createUserProfileDoc(user, {\n      displayName\n    });\n    yield put(signInStartWithEmail({\n      email,\n      password\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error.message));\n  }\n} // USER SIGN UP FAILURE---------------------------------------------------------------------------\n\n\nfunction* onSignUpFailure() {\n  yield takeLatest(ACTION_TYPES.SIGN_UP_FAILURE, showSignInFailureMsg);\n}\n\nfunction showSignInFailureMsg(action) {\n  const errorMessage = action.payload;\n\n  if (errorMessage === \"Password should be at least 6 characters\") {\n    alert(errorMessage);\n  }\n}\n\nexport function* userSagas() {\n  yield all([call(onCheckUserSession), call(onGoogleSignInStart), call(onEmailSignInStart), call(onSignOutStart), call(onSignUpStart), call(onSignUpFailure)]);\n}","map":{"version":3,"sources":["/Users/jasoncarrillo/Documents/Coding/React Projects/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","ACTION_TYPES","auth","provider","createUserProfileDoc","getCurrentUser","signInFailure","signInSuccess","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","signInStartWithEmail","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","message","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithGoogle","user","signInWithPopup","onEmailSignInStart","EMAIL_SIGN_IN_START","signInWithEmail","action","email","password","payload","signInWithEmailAndPassword","onCheckUserSession","CHECK_USER_SESSION","checkIfUserIsAuthenticated","onSignOutStart","SIGN_OUT_START","userSignOut","signOut","onSignUpStart","SIGN_UP_START","signUp","displayName","confirmPassword","alert","createUserWithEmailAndPassword","onSignUpFailure","SIGN_UP_FAILURE","showSignInFailureMsg","errorMessage","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport { ACTION_TYPES } from '../action-types';\nimport { auth, provider, createUserProfileDoc, getCurrentUser } from '../../firebase/utils';\nimport { \n    signInFailure, signInSuccess, \n    signOutSuccess, signOutFailure,\n    signUpSuccess, signUpFailure, signInStartWithEmail } from './user-actions';\n// UTILITIES -----------------------------------------------------------------\nfunction* getSnapshotFromUserAuth(userAuth) {\n    try {\n        const userRef      = yield call(createUserProfileDoc, userAuth);\n        const userSnapshot = yield userRef.get();\n        yield put(\n            signInSuccess({id: userSnapshot.id, ...userSnapshot.data()})\n        );\n    } catch (error) {\n        yield put(signInFailure(error.message))\n    }\n}\n\n\n\n// Google Sign In------------------------------------------------------------------------------------\nfunction* onGoogleSignInStart() {\n    yield takeLatest(\n        ACTION_TYPES.GOOGLE_SIGN_IN_START,\n        signInWithGoogle\n    );\n}\nfunction* signInWithGoogle() {\n    try {\n        const { user } = yield auth.signInWithPopup(provider);\n        yield getSnapshotFromUserAuth(user);\n    } catch(error) {\n        yield put(signInFailure(error.message))\n    }\n}\n\n\n\n \n// User Sign In------------------------------------------------------------------------------------\nfunction* onEmailSignInStart() {\n    yield takeLatest(\n        ACTION_TYPES.EMAIL_SIGN_IN_START,\n        signInWithEmail\n    )\n}\nfunction* signInWithEmail(action) {\n    try {\n        const { email, password } = action.payload;\n        const { user }            = yield auth.signInWithEmailAndPassword(email, password);\n        yield getSnapshotFromUserAuth(user);   \n    } catch (error) {\n        yield put(signInFailure(error.message))\n    }\n}\n\n\n\n\n// USER SESSION CHECKING---------------------------------------------------------------------------\nfunction* onCheckUserSession() {\n    yield takeLatest(\n        ACTION_TYPES.CHECK_USER_SESSION,\n        checkIfUserIsAuthenticated\n    )\n}\nfunction* checkIfUserIsAuthenticated() {\n    try {\n        const userAuth = yield getCurrentUser();\n        if (!userAuth) {\n            return\n        }\n        yield getSnapshotFromUserAuth(userAuth);\n    } catch(error) {\n        yield put(signInFailure(error.message));\n    }\n}\n\n\n// USER SIGN OUT---------------------------------------------------------------------------\nfunction* onSignOutStart() {\n    yield takeLatest(\n        ACTION_TYPES.SIGN_OUT_START,\n        userSignOut\n    )\n}\nfunction* userSignOut() {\n    try {\n        yield auth.signOut();\n        yield put(signOutSuccess())\n    } catch(error) {\n        yield put(signOutFailure(error.message))\n    }\n}\n\n\n// USER SIGN UP---------------------------------------------------------------------------\nfunction* onSignUpStart() {\n    yield takeLatest(ACTION_TYPES.SIGN_UP_START, signUp)\n}\nfunction* signUp(action) {\n    const { displayName, email, password, confirmPassword } = action.payload;\n    if (password !== confirmPassword) {\n        alert(\"Passwords do not match. Try again.\");\n        return;\n    }\n    try {\n        const { user } = yield auth.createUserWithEmailAndPassword(email, password);\n        yield createUserProfileDoc(user, { displayName });\n        yield put(signInStartWithEmail({email, password}));\n    } catch(error) {\n        yield put(signUpFailure(error.message))\n    }\n}\n\n\n\n// USER SIGN UP FAILURE---------------------------------------------------------------------------\nfunction* onSignUpFailure() {\n    yield takeLatest(ACTION_TYPES.SIGN_UP_FAILURE, showSignInFailureMsg);\n}\nfunction showSignInFailureMsg(action) {\n    const errorMessage = action.payload;\n    if (errorMessage === \"Password should be at least 6 characters\") {\n        alert(errorMessage);\n    }\n}\n\n\n\n\n\nexport function* userSagas() {\n    yield all([\n        call(onCheckUserSession),\n        call(onGoogleSignInStart),\n        call(onEmailSignInStart),\n        call(onSignOutStart),\n        call(onSignUpStart),\n        call(onSignUpFailure)\n    ]);\n}"]},"metadata":{},"sourceType":"module"}