{"ast":null,"code":"import { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist'; // import the localStorage object from browser; you can also get sessionStorage\n\nimport storage from 'redux-persist/lib/storage';\nimport userReducer from './user/user-reducer';\nimport cartReducer from './cart/cart-reducer';\nimport directoryReducer from './directory-data/directory.reducer';\nimport collectionsReducer from './collections-data/shop-data.reducer';\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['cart'] // value is an array of which reducers you want to store in storage obj\n  // we only want 'cart' because firebase handles the user storage.\n\n};\nconst rootReducer = combineReducers({\n  // if the reducer has more than one action, each action will be a key\n  user: userReducer,\n  cart: cartReducer,\n  directory: directoryReducer,\n  collections: collectionsReducer\n});\nexport default persistReducer(persistConfig, rootReducer);","map":{"version":3,"sources":["/Users/jasoncarrillo/Documents/Coding/React Projects/crwn-clothing/src/redux/root-reducer.js"],"names":["combineReducers","persistReducer","storage","userReducer","cartReducer","directoryReducer","collectionsReducer","persistConfig","key","whitelist","rootReducer","user","cart","directory","collections"],"mappings":"AAAA,SAASA,eAAT,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B,C,CACA;;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,WAAP,MAAwB,qBAAxB;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,kBAAP,MAA+B,sCAA/B;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,GAAG,EAAE,MADa;AAElBN,EAAAA,OAFkB;AAGlBO,EAAAA,SAAS,EAAE,CAAC,MAAD,CAHO,CAGE;AACpB;;AAJkB,CAAtB;AAOA,MAAMC,WAAW,GAAGV,eAAe,CAAC;AAChC;AACAW,EAAAA,IAAI,EAAER,WAF0B;AAGhCS,EAAAA,IAAI,EAAER,WAH0B;AAIhCS,EAAAA,SAAS,EAAER,gBAJqB;AAKhCS,EAAAA,WAAW,EAAER;AALmB,CAAD,CAAnC;AAQA,eAAeL,cAAc,CAACM,aAAD,EAAgBG,WAAhB,CAA7B","sourcesContent":["import { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\n// import the localStorage object from browser; you can also get sessionStorage\nimport storage from 'redux-persist/lib/storage';\nimport userReducer from './user/user-reducer';\nimport cartReducer from './cart/cart-reducer';\nimport directoryReducer from './directory-data/directory.reducer';\nimport collectionsReducer from './collections-data/shop-data.reducer';\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n    whitelist: ['cart'] // value is an array of which reducers you want to store in storage obj\n    // we only want 'cart' because firebase handles the user storage.\n}\n\nconst rootReducer = combineReducers({\n    // if the reducer has more than one action, each action will be a key\n    user: userReducer,\n    cart: cartReducer,\n    directory: directoryReducer,\n    collections: collectionsReducer\n});\n\nexport default persistReducer(persistConfig, rootReducer)\n"]},"metadata":{},"sourceType":"module"}