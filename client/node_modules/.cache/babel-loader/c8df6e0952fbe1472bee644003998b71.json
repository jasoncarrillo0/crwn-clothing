{"ast":null,"code":"import { takeEvery, call, put } from 'redux-saga/effects';\nimport { ACTION_TYPES } from '../../action-types';\nimport { firestore, convertCollectionSnapshotToMap } from '../../../firebase/utils'; // takeEvery creates a non-blocking instance of a function so the app can continue\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ACTION_TYPES.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}\n\nfunction* fetchCollectionsAsync() {\n  try {\n    const collectionsRef = firestore.collection('collections');\n    const snapshot = yield collectionsRef.get();\n    const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);\n    yield put(ACTION_TYPES.FETCH_COLLECTIONS_SUCCESS(collectionsMap));\n  } catch (error) {\n    yield put(ACTION_TYPES.FETCH_COLLECTIONS_FAILURE(error.message));\n  }\n}","map":{"version":3,"sources":["/Users/jasoncarrillo/Documents/Coding/React Projects/crwn-clothing/src/redux/_db/collections-data/collections-data.sagas.js"],"names":["takeEvery","call","put","ACTION_TYPES","firestore","convertCollectionSnapshotToMap","fetchCollectionsStart","FETCH_COLLECTIONS_START","fetchCollectionsAsync","collectionsRef","collection","snapshot","get","collectionsMap","FETCH_COLLECTIONS_SUCCESS","error","FETCH_COLLECTIONS_FAILURE","message"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,QAAqC,oBAArC;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASC,SAAT,EAAoBC,8BAApB,QAA0D,yBAA1D,C,CAEA;;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMN,SAAS,CACXG,YAAY,CAACI,uBADF,EAEXC,qBAFW,CAAf;AAIH;;AAED,UAAUA,qBAAV,GAAkC;AAC9B,MAAI;AACA,UAAMC,cAAc,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAvB;AACA,UAAMC,QAAQ,GAAS,MAAMF,cAAc,CAACG,GAAf,EAA7B;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAACI,8BAAD,EAAiCM,QAAjC,CAAjC;AACA,UAAMT,GAAG,CAACC,YAAY,CAACW,yBAAb,CAAuCD,cAAvC,CAAD,CAAT;AACH,GALD,CAKE,OAAOE,KAAP,EAAc;AACZ,UAAMb,GAAG,CAACC,YAAY,CAACa,yBAAb,CAAuCD,KAAK,CAACE,OAA7C,CAAD,CAAT;AACH;AACJ","sourcesContent":["import { takeEvery, call, put } from 'redux-saga/effects';\nimport { ACTION_TYPES } from '../../action-types';\nimport { firestore, convertCollectionSnapshotToMap } from '../../../firebase/utils';\n\n// takeEvery creates a non-blocking instance of a function so the app can continue\n\nexport function* fetchCollectionsStart() {\n    yield takeEvery(\n        ACTION_TYPES.FETCH_COLLECTIONS_START, \n        fetchCollectionsAsync \n    );\n}\n\nfunction* fetchCollectionsAsync() {\n    try {\n        const collectionsRef = firestore.collection('collections');\n        const snapshot       = yield collectionsRef.get();\n        const collectionsMap = yield call(convertCollectionSnapshotToMap, snapshot);    \n        yield put(ACTION_TYPES.FETCH_COLLECTIONS_SUCCESS(collectionsMap));\n    } catch (error) {\n        yield put(ACTION_TYPES.FETCH_COLLECTIONS_FAILURE(error.message));\n    }\n}"]},"metadata":{},"sourceType":"module"}